
name: Run Unit Tests on Multiple Python Versions and Distributions

on:
  workflow_call:

env:
  REPOSITORY: lukeshirnia/out-of-memory

jobs:
  test-python-versions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["python27", "python36", "python310"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run pytest
      run: |
        docker run --rm \
        -v ${{ github.workspace }}:/app \
        ${{ env.REPOSITORY }}:${{ matrix.python-version }}-pytest \
        pytest -v --ignore=tests/test_system.py --ignore tests/test_large_log.py

  test-systems:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ["amazonlinux", "centos7", "osx"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup test command
      id: setup
      run: |
        if [ "${{ matrix.distro }}" == "osx" ]; then
          echo "::set-output name=command::python -m pytest"
        else
          echo "::set-output name=command::pytest"
        fi

    - name: Run system tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/app \
        ${{ env.REPOSITORY }}:${{ matrix.distro }}-pytest \
        ${{ steps.setup.outputs.command }} -v tests/test_validate_options.py -p no:cacheprovider

  test-systems-with-logs:
    # We only want to pull large files once, so lets run this on a single runner
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ["amazonlinux"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Run system tests with logs
      run: |
        docker run --rm -v ${{ github.workspace }}:/app \
        ${{ env.REPOSITORY }}:${{ matrix.distro }}-pytest \
        pytest -v tests/test_large_log.py -p no:cacheprovider -s
